<?php
// $Id$
/**
* @file
* This module provides an email interface for administrators.
* Using this module, administrators can send email to a user from the
* user's "view" page.
*/
 
/**
 * implementation of hook_help()
 */
function admin_messaging_help($path, $arg) {
    if ($path == 'admin/help#admin_messaging') {
        $txt = 'This module provides a way for an administrator '.
            'to send emails to user. '.
	    'using optional sending methods.'.
            'It assumes that Drupal mailer is configured.';
        return '<p>'.t($txt).'</p>';
    }
}
/**
* Implementation of hook_menu()
*/
function admin_messaging_menu() {
    // User ID must pass:
    $items['admin/admin_messaging/compose/%'] = array(
        'title' => 'Compose New Message',
        'page callback' => 'admin_messaging_compose',
        'page arguments' => array(3), // <- userID (from % in node path)
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}
/**
 * Compose a message.
 * Creating form neccessary to compose message.
 *
 * @param $to
 *  The address to send to.
 * @return
 *  HTML.
 */
function admin_messaging_compose($userid) {
    $userid = intval($userid);
    if ($userid == 0)
        return t('User ID must be an integer.');
    $account = user_load($userid);
    if (empty($account))
        return t('No such user found.');
    $to = $account->mail;
    $sb = '<p>'
        .t('Send message to @email.', array('@email' => $to))
        .'</p>';
    $sb .= drupal_get_form('admin_messaging_compose_form', $account);
    return $sb;
}
/**
 * Form constructor function with the fields interface
 */
function admin_messaging_compose_form($context, $account) {
    // This is a value only -- equivalent to a hidden field, except
    // that it is never rendered into the HTML.
    $form['to'] = array(
        '#type' => 'value',
        '#value' => $account,
    );
    // This creates a fieldset for the body:
    $form['message'] = array(
        '#type' => 'fieldset',
        '#title' => t('Compose New Message'),
    );
    // Textfield for subject of the body
    $form['message']['subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#size' => 50,
        '#maxlengh' => 255,
        '#description' => t('The subject of the message.'),
    );
    // Text area for the body.
    $form['message']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Message'),
        '#cols' => 50,
        '#rows' => 5,
        '#description' => t('The body of the message.'),
    );
    // Creates a fieldset for details
    $form['details'] = array(
        '#type' => 'fieldset',
        '#title' => t("Details"),
    );
    // Creates a fieldset for sending options
$form['method'] = array (
  '#type' => 'select' ,
  '#title' => t('Select Sending Method') ,
   '#rows' => 5 ,
  '#options' => messaging_method_list(),//the option list called from the messaging list, alternate '#options' => array(email => 'Email', web => 'Web') ),
  '#default_value' => messaging_method_default(),
) ;
    // Checkbox: if checked, CC the author, too.
    $form['details']['cc_me'] = array(
        '#type' => 'checkbox',
        '#title' => t('BCC Yourself'),
        '#default_value' => 1,
        '#description' =>
            t('If this is checked, the message will also be sent to you.'),
    );
    // submit button:
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send Mail'),
    );
    return $form;
}

/**
 * Form submission handler for constructor function admin_messaging_compose_form()
 */
function admin_messaging_compose_form_submit($form, &$form_state) {
    global $user;	
    $form_values = $form_state['values'];
    $account = $form_values['to'];
    $body = split("\n", $form_state['values']['body']);
    $body = array_map('trim', $body);  
   $message = (object)array(
     'type' => 'debug',
     'subject' => $form_state['values']['subject'],
     'body' => $body,  
   ); 
         drupal_mail('admin_messaging', 'composemessage', $account->mail, user_preferred_language($account),
           $form_values,
           variable_get('site_mail', null),
           true // Automatically send email
	);  
   $form_state['redirect'] = sprintf('user/%d', $account->uid);	
  // Destination may be account or plain parameter/s
  $destination = $form_state['values']['to'];
  $destination = 1;
  if ($account = user_load(array('name' => $destination))) {
       $result = admin_messaging_user($account, $message, $form_state['values']['method']);
        } else {
         $result = messaging_message_send(array($destination), $message, $form_state['values']['method']);
         }
   drupal_set_message(t('Sent message with result: %result', array('%result' => $result ? 'OK' : 'Error'))); 
}
/**
 * Implementation of hook_mail()
 */
function admin_messaging_mail($key, &$message, $params) {
    global $user;
    // catch calls to this hook from compose form.
    if ($key == 'composemessage') {
        $language = $params['language'];
        $account = $params['to'];
        if ($params['cc_me']) {
            // current user's email address:
            $my_account = $user;
            $message['headers']['bcc'] = $my_account->mail;
        }
        $message['to'] = $account->mail;
        $message['subject'] =
            t('Message From Nojoshmo: ', array(), $language->language);
        $message['subject'] .= $params['subject'];
        $message['body'] = $params['body'];
    }
}

/**
 * Implements hook_mail_alter().
 */
function admin_messaging_mail_alter(&$message) {
    $append = "\n \n=======================\n"
        ."This message was sent from !site_name (!website). \n"
        ."If you believe this message to be a case of abuse, \n"
        ."please contact !site_email.\n";
    $args = array(
        '!website' => url('', array('absolute' => true)),
        '!site_email' => variable_get('site_mail', null),
        '!site_name' => variable_get('site_name', 'Nojoshmo'),
    );
    $message['body'] .= t($append, $args);
}
/**
 * Implementation of hook_user().
 */
function admin_messaging_user($op, &$edit, &$account, $category) {
    if ($op == 'view' && user_access('administer users')) {
       // Create the outer "block"
        $account->content['admin_messaging'] = array(
            '#type' => 'user_profile_category',
            '#attributes' => array('class' => 'user-member'),
            '#weight' => 0,
            '#title' => t('Contact This User'),
        );
        // Create the content of the block
        $account->content['admin_messaging']['EmailLink'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Send a message to this user from the site '
            . 'administrator.'),
            '#value' => l(
                'Email To User',
                'admin/admin_messaging/compose/'. $account->uid
            ),
        );
    }
}
/**
* Implementation of hook_messaging()
*/
function admin_messaging_debug_messaging($op = 'info' , $type = NULL) {
  switch($op) {
    case 'send methods':
      $info['debug'] = array(
        'title' => t('Debug'),
	'name' => t('Debug'),
	'destination' => 'name',
	'type' => MESSAGING_TYPE_PUSH,
	'glue' => 'br />',
	'footer' => "\n=======================\n",
	'description' => t('Sending messages methods.'),
	'send callback' => '',
       );
       return $info;
    }
}
/**
 * Implementation of hook_perm().
 */
function admin_messaging_perm() {
  return array('administer admin_messaging', 'send email to users');
}


