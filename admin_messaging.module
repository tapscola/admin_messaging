<?php
// $Id$
/**
* @file
* This module provides messaging interface for administrators.
* Using this module, administrators can send email to a user from the
* user's "view" page.
*/
 
/**
 * implementation of hook_help()
 */
 // Method with push delivery. Messages will be pushed to the user using messaging sending methods.
define('MESSAGING_TYPE_PUSH', 1);

function admin_messaging_help($path, $arg) {
    if ($path == 'admin/help#admin_messaging') {
        $txt = 'This module provides a way for an administrator '.
            'to send messages to user. '.
	    'using optional sending methods.'.
            'It assumes that Drupal mailer is configured.';
        return '<p>'.t($txt).'</p>';
    }
}

/**
 * Implementation of hook_perm().
 */
function admin_messaging_perm() {
  return array('administer admin_messaging', 'send messages to users', 'administer multiple messages');
}

/**
* Implementation of hook_menu()
*/
function admin_messaging_menu() {
    // User ID must pass:
    //$items = array();
   $items['user/%user/compose'] = array(
        'title' => 'Admin Message',
        'page callback' => 'admin_messaging_compose',
        'page arguments' => array(1), // <- userID (from % in node path)
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
    );  
   $items['admin/settings/admin-messaging-multiple'] = array(
    'title' => 'Admin Messages',
    'description' => 'Send Message To Users.',
    'page callback' => 'admin_messaging_multiple_compose',
    'page arguments' => array('admin_messaging_multiple_form'),
    'access arguments' => array('send messages to users'),
    'file' => 'admin_messaging.admin.inc',
  );
        // Auto-completes available user names & removes duplicates.
    $items['admin/settings/admin_messaging_multiple_autocomplete'] = array(
       'title' => 'Multiple Messaging',
       'page callback'    => 'admin_message_multiple_autocomplete',
       'page arguments' => array('admin_messaging_multiple_form'),
       'access arguments' => array('administer multiple messages'),
       'file' => 'admin_messaging.admin.inc',
      // 'type'             => MENU_CALLBACK,
       'weight'           => -10,
 );

  return $items;
}

/**
 * Implementation of hook_user().
 */
function admin_messaging_user($op, &$edit, &$account, $category) {
   if ($op == 'view' && user_access('administer admin_messaging')) {
       // Create the outer "block"
        $account->content['admin_messaging'] = array(
            '#type' => 'user_profile_category',
            '#attributes' => array('class' => 'user-member'),
            '#weight' => 0,
            '#title' => t(''),
        ); 
    } 
}

/**
 * Form constructor function with the fields interface
 */
function admin_messaging_compose_form($context, $account) {
    // This is a value only -- equivalent to a hidden field, except
    // that it is never rendered into the HTML.
    $form['to'] = array(
        '#type' => 'value',
        '#value' => $account,
    );   
    // This creates a fieldset for the body:
    $form['message'] = array(
        '#type' => 'fieldset',
        '#title' => t('Compose New Message'),
    );

    // Textfield for subject of the body
    $form['message']['subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#size' => 50,
        '#maxlengh' => 255,
        '#required' => true,
        '#description' => t('The subject of the message.'),
    );
    // Text area for the body.
    $form['message']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Message'),
        '#cols' => 50,
        '#rows' => 5,
        '#required' => true,
        '#description' => t('The body of the message.'),
    );
    // Creates a fieldset for details
    // $form['details'] = array(
        // '#type' => 'fieldset',
        // '#title' => t("Details"),
    // );
    // Creates a fieldset for sending options
	$method_list = messaging_method_list();
	$method_list['debug'] = 'Debug';
	$method_list['user'] = 'User Prefered';
	$form['method'] = array (
		'#type' => 'select' ,
		'#title' => t('Select Sending Method') ,
		 '#rows' => 5 ,
		'#options' => $method_list, //the option list called from the messaging list, alternate '#options' => array(email => 'Email', web => 'Web') ),
		'#default_value' => messaging_method_default(),
	) ;
  // submit button:
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Message'),
  );
  return $form;
}

/**
 * Compose a message.
 * Creating form neccessary to compose message.
 *
 * @param $to
 *  The address to send to.
 * @return
 *  HTML.
 */
function admin_messaging_compose($user) {
    if ($user->uid <= 0)
        return t('User ID must be an integer.');
    $account = $user;
    if (empty($account))
        return t('No such user found.');
    $to = $account->mail;
    $sb = '<p>'
        .t('Send message to user', array('@email' => $to))
        .'</p>';
    $sb .= drupal_get_form('admin_messaging_compose_form', $account);
    return $sb;
}

/**
 * Compose a message.
 * Creating form neccessary to compose message for.
 * To be send to multiple users.
 * @param $to
 *  The address to send to.
 * @return
 *  HTML.
 */
function admin_messaging_multiple_compose($user, $accounts) {
global $user;
//foreach ($account as $account)
    $account = $user;
    $to = $account->mail;
    $sb = '<p>'
        .t('Send message to user', array('@email' => $to))
        .'</p>';
    $sb .= drupal_get_form('admin_messaging_multiple_form', $account);
    return $sb;
}

/**
 * @}
 */

/**
 * Return autocomplete results for usernames.
 *
 * Prevents usernames from being used and/or suggested twice.
 */
function admin_message_multiple_autocomplete($string, $user) {
$names = array();
  // 1: Parse $string and build list of valid user names.
  $fragments = explode(',', $string);
  foreach ($fragments as $index => $name) {
    if ($name = trim($name)) {
      $names[$name] = $name;
    }
  }
  // 2: Find the next user name suggestion.
  $fragment = array_pop($names);
  $matches = array();
  if (!empty($fragment)) {
    $query = _privatemsg_assemble_query('autocomplete', $fragment, $names);
    $result = db_query_range($query['query'], $fragment, 0, 10);
    $prefix = count($names) ? implode(", ", $names) .", " : '';
    // 3: Build proper suggestions and print.
    while ($user = db_fetch_object($result)) {
      $matches[$prefix . $user->name .", "] = $user->name;
    }
  }
  // convert to object to prevent drupal bug, see http://drupal.org/node/175361
  drupal_json((object)$matches);
}
 
/**
 * Form submission handler for constructor function admin_messaging_compose_form()
 */
function admin_messaging_compose_form_submit($form, &$form_state) {
	//print_r($form_state);
  // $acount = user_load($form_state['values']['to']->uid);
  $form_values = $form_state['values'];
  $account = $form_state['values']['to'];
  $body = split("\n", $form_state['values']['body']);
  $body = array_map('trim', $body);  
  $message = array (
    'type' => 'push',
    'subject' => $form_state['values']['subject'],
		'body' => $body,  
  );
	
	// If method defined force sending method
	if ($form_state['values']['method'] != 'user')
		$method = $form_state['values']['method'];
	else
		$method = null;	
	
	// Set redirect page
  $form_state['redirect'] = sprintf('user/%d', $account->uid);
	
	// send message if user set
  if ($account) {
		$result = messaging_message_send_user($account, $message, $method);
	}
   drupal_set_message(t('Sent message with result: %result', array('%result' => $result ? 'OK' : 'Error'))); /**/
}



