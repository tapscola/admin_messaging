<?php
// $Id$
/**
* @file
* This module provides an email interface for administrators.
* Using this module, administrators can send email to a user from the
* user's "view" page.
*/
 
/**
 * implementation of hook_help()
 */
 // Method with push delivery. Messages will be pushed to the user using messaging sending methods.
define('MESSAGING_TYPE_PUSH', 1);

function admin_messaging_help($path, $arg) {
    if ($path == 'admin/help#admin_messaging') {
        $txt = 'This module provides a way for an administrator '.
            'to send emails to user. '.
	    'using optional sending methods.'.
            'It assumes that Drupal mailer is configured.';
        return '<p>'.t($txt).'</p>';
    }
}

/**
 * Implementation of hook_perm().
 */
function admin_messaging_perm() {
  return array('administer admin_messaging', 'send email to users');
}

/**
* Implementation of hook_menu()
*/
function admin_messaging_menu() {
    // User ID must pass:
    $items['admin/admin_messaging/compose/%'] = array(
        'title' => 'Compose New Message',
        'page callback' => 'admin_messaging_compose',
        'page arguments' => array(3), // <- userID (from % in node path)
        'access arguments' => array('administer users'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}
/**
 * Compose a message.
 * Creating form neccessary to compose message.
 *
 * @param $to
 *  The address to send to.
 * @return
 *  HTML.
 */
function admin_messaging_compose($userid) {
    $userid = intval($userid);
    if ($userid == 0)
        return t('User ID must be an integer.');
    $account = user_load($userid);
    if (empty($account))
        return t('No such user found.');
    $to = $account->mail;
    $sb = '<p>'
        .t('Send message to @email.', array('@email' => $to))
        .'</p>';
    $sb .= drupal_get_form('admin_messaging_compose_form', $account);
    return $sb;
}
/**
 * Form constructor function with the fields interface
 */
function admin_messaging_compose_form($context, $account) {
    // This is a value only -- equivalent to a hidden field, except
    // that it is never rendered into the HTML.
    $form['to'] = array(
        '#type' => 'value',
        '#value' => $account,
    );
    // This creates a fieldset for the body:
    $form['message'] = array(
        '#type' => 'fieldset',
        '#title' => t('Compose New Message'),
    );
    // Textfield for subject of the body
    $form['message']['subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#size' => 50,
        '#maxlengh' => 255,
        '#required' => true,
        '#description' => t('The subject of the message.'),
    );
    // Text area for the body.
    $form['message']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Message'),
        '#cols' => 50,
        '#rows' => 5,
        '#required' => true,
        '#description' => t('The body of the message.'),
    );
    // Creates a fieldset for sending options
	$method_list = messaging_method_list();
	// $method_list['debug'] = 'Debug';
	$method_list['user'] = 'User Prefered';
	$form['method'] = array (
		'#type' => 'select' ,
		'#title' => t('Select Sending Method') ,
		 '#rows' => 5 ,
		'#options' => $method_list, //the option list called from the messaging list, alternate '#options' => array(email => 'Email', web => 'Web') ),
		'#default_value' => messaging_method_default(),
	) ;
  // submit button:
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Mail'),
  );
  return $form;
}

/**
 * Form submission handler for constructor function admin_messaging_compose_form()
 */
function admin_messaging_compose_form_submit($form, &$form_state) {
	// print_r($form_state);
  $account = $form_state['values']['to'];
  $body = split("\n", $form_state['values']['body']);
  $body = array_map('trim', $body);  
  $message = array (
    'type' => 'push',
    'subject' => $form_state['values']['subject'],
		'body' => $body,  
  );
	
	// If method defined force sending method
	if ($form_state['values']['method'] != 'user')
		$method = $form_state['values']['method'];
	else
		$method = null;
	
	// Set redirect page
  $form_state['redirect'] = sprintf('user/%d', $account->uid);
	
	// send message if user set
  if ($account) {
		$result = messaging_message_send_user($account, $message, $method);
	}
   drupal_set_message(t('Sent message with result: %result', array('%result' => $result ? 'OK' : 'Error'))); /**/
}


